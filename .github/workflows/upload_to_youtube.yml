name: YouTube Upload (OU Stock Parody)

on:
  schedule:
      # 매일 오전 5:30 KST (전날 20:30 UTC)에 실행
    - cron: '30 20 * * *'
  workflow_dispatch:

jobs:
  upload_to_youtube:
    runs-on: ubuntu-latest
    env:
      GSHEET_ID: ${{ secrets.GSHEET_ID }}
      GOOGLE_CREDENTIALS_JSON: ${{ secrets.GOOGLE_CREDENTIALS_JSON }}
      YOUTUBE_CLIENT_SECRETS: ${{ secrets.YOUTUBE_CLIENT_SECRETS }}
      YOUTUBE_TOKEN_JSON: ${{ secrets.YOUTUBE_TOKEN_JSON }}
      CLAUDE_API_KEY: ${{ secrets.CLAUDE_API_KEY }}
    steps:
      - name: 📥 Checkout repository with LFS
        uses: actions/checkout@v4
        with:
          lfs: true

      - name: 🐍 Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: 📦 Install dependencies
        run: pip install -r youtube_uploader/requirements_youtube.txt

      - name: 🔐 Restore YouTube authentication files
        run: |
          mkdir -p youtube_uploader
          echo "${{ secrets.YOUTUBE_CLIENT_SECRETS }}" > youtube_uploader/client_secrets.json
          printf "%s" '${{ secrets.YOUTUBE_TOKEN_JSON }}' > youtube_uploader/token.json

      - name: 🚀 Upload to YouTube
        run: python youtube_uploader/upload_to_youtube.py

      - name: 🧹 Clean up old video files (LFS aware)
        run: |
          echo "🧹 오래된 비디오 파일 정리 중 (LFS 고려)..."
          if [ -d "parody_video" ]; then
            # 가장 최근 파일 찾기 (파일명 기준)
            latest_file=$(find parody_video -name "*.mp4" | while read file; do
              filename=$(basename "$file")
              date_part=$(echo "$filename" | grep -o '2025[0-9]{4}_[0-9]{6}' | head -1)
              if [ -n "$date_part" ]; then
                echo "$date_part $file"
              else
                echo "00000000000000 $file"  # 시간정보 없는 파일은 맨 뒤로
              fi
            done | sort -r | head -1 | cut -d' ' -f2-)
            
            if [ -n "$latest_file" ]; then
              echo "📹 최신 파일 보존: $(basename "$latest_file")"
              
              # 오래된 파일들 삭제 (LFS 파일 포함)
              deleted_count=0
              for file in parody_video/*.mp4; do
                if [ -f "$file" ] && [ "$file" != "$latest_file" ]; then
                  echo "🗑️ 삭제 시도: $(basename "$file")"
                  
                  # LFS untrack 먼저 시도
                  git lfs untrack "$file" 2>/dev/null || true
                  
                  # 파일 삭제 시도
                  if rm "$file" 2>/dev/null; then
                    echo "   ✅ 삭제 완료: $(basename "$file")"
                    deleted_count=$((deleted_count + 1))
                  else
                    echo "   ⚠️ 삭제 실패: $(basename "$file") (권한 문제 또는 LFS 파일)"
                  fi
                fi
              done
              echo "✅ 정리 완료: $deleted_count개 파일 삭제됨"
            else
              echo "⚠️ parody_video 폴더에 mp4 파일이 없습니다."
            fi
          else
            echo "⚠️ parody_video 디렉토리가 없습니다."
          fi

      - name: 📊 CSV 파일 상태 확인
        run: |
          echo "📊 CSV 파일 상태 확인 중..."
          if [ -d "csv_data" ]; then
            csv_count=$(find csv_data -name "*.csv" -type f | wc -l)
            if [ $csv_count -gt 0 ]; then
              echo "📄 현재 CSV 파일 개수: $csv_count개"
              echo "📋 CSV 파일 목록:"
              ls -la csv_data/*.csv
            else
              echo "⚠️ csv_data 폴더에 CSV 파일이 없습니다."
            fi
          else
            echo "⚠️ csv_data 디렉토리가 없습니다."
          fi

      - name: 📝 Commit and push changes
        run: |
          echo "📝 변경사항 커밋 및 푸시 중..."
          git add -A
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git commit -m "🎬 YouTube 업로드 완료 - $(date +'%Y-%m-%d %H:%M')" || echo "⚠️ 커밋 실패 (변경사항 없음)"
          git push || echo "⚠️ 푸시 실패"

      - name: 🧹 Clean up LFS storage
        run: |
          echo "🧹 Git LFS 저장 공간 정리 중..."
          git lfs prune --force
          echo "✅ LFS 정리 완료"
