name: YouTube Upload (OU Stock Parody)

on:
  schedule:
      # 매일 오전 6:30 KST (전날 21:30 UTC)에 실행
    - cron: '30 21 * * *'
  workflow_dispatch:

jobs:
  upload_to_youtube:
    runs-on: ubuntu-latest
    env:
      GSHEET_ID: ${{ secrets.GSHEET_ID }}
      GOOGLE_CREDENTIALS_JSON: ${{ secrets.GOOGLE_CREDENTIALS_JSON }}
      YOUTUBE_CLIENT_SECRETS: ${{ secrets.YOUTUBE_CLIENT_SECRETS }}
      YOUTUBE_TOKEN_JSON: ${{ secrets.YOUTUBE_TOKEN_JSON }}
      CLAUDE_API_KEY: ${{ secrets.CLAUDE_API_KEY }}
    steps:
      - name: 📥 Checkout repository with LFS
        uses: actions/checkout@v4
        with:
          lfs: true

      - name: 🐍 Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: 📦 Install dependencies
        run: pip install -r youtube_uploader/requirements_youtube.txt

      - name: 🔐 Restore YouTube authentication files
        run: |
          mkdir -p youtube_uploader
          echo "${{ secrets.YOUTUBE_CLIENT_SECRETS }}" > youtube_uploader/client_secrets.json
          printf "%s" '${{ secrets.YOUTUBE_TOKEN_JSON }}' > youtube_uploader/token.json

      - name: 🚀 Upload to YouTube
        run: python youtube_uploader/upload_to_youtube.py

      - name: 🧹 Clean up old video files
        run: |
          echo "🧹 parody_video 폴더에서 최근 파일만 남기고 이전 파일들 삭제 중..."
          cd parody_video
          
          # .mp4 파일들 중 가장 최근 파일 찾기
          latest_file=$(ls -t *.mp4 2>/dev/null | head -1)
          
          if [ -n "$latest_file" ]; then
            echo "📹 최근 파일: $latest_file"
            
            # 최근 파일을 제외한 모든 .mp4 파일 삭제
            for file in *.mp4; do
              if [ "$file" != "$latest_file" ]; then
                echo "🗑️ 삭제: $file"
                rm "$file"
              fi
            done
            
            echo "✅ 정리 완료! 최근 파일만 남겼습니다."
          else
            echo "⚠️ 삭제할 .mp4 파일이 없습니다."
          fi
